{"version":3,"sources":["config.ts","connectors.ts","components/spinner.tsx","components/connect.tsx","services/firebase.ts","models/salt_season.ts","services/etherium/index.ts","services/etherium/contracts/sellerv1.ts","services/device.ts","components/eth.tsx","saltseasons/_success.tsx","components/image.tsx","saltseasons/_salt_season.tsx","saltseasons/index.tsx","services/web3_hooks.ts","app.tsx","reportWebVitals.ts","index.tsx"],"names":["eip1152contractAddress","minterAddress","firebaseConfig","apiKey","projectId","INFURA_JSON_RPC_API","1","42","SELLER_CONTRACT_ADDRESS","POLLING_INTERVAL","injected","InjectedConnector","supportedChainIds","walletconnect","WalletConnectConnector","rpc","config","bridge","qrcode","pollingInterval","ledger","LedgerConnector","chainId","url","trezor","TrezorConnector","manifestEmail","manifestAppUrl","Spinner","innerWidth","this","props","innerHeight","style","height","width","display","dangerouslySetInnerHTML","__html","React","Component","ConnectorButton","children","theConnector","title","context","useWeb3React","activate","connector","href","className","onClick","event","stopPropagation","Connect","account","deactivate","error","active","id","message","Connectors","Chip","fontWeight","color","label","Firebase","initializeApp","collection","firestore","indexByChainId","a","where","get","snapshot","items","docs","map","doc","ss","data","TokenId","getJsonRpcProvider","jsonRPCAPIURL","network","JsonRpcProvider","contractABI","getContract","contractAddress","providerOrSigner","Contract","isMobile","window","Success","useState","open","setOpen","state","Dialog","DialogTitle","DialogContent","padding","CircularProgress","onClose","DialogActions","Button","maxWidth","Link","Image","loading","backgroundColor","position","top","left","backgroundImage","imageUrl","backgroundPosition","backgroundSize","backgroundRepeat","SaltSeasonComponent","saltSeason","provider","ETHERIUM","library","undefined","contract","setContract","useEffect","_contract","SELLERV1","sellerContractAddress","contractToWrite","setContractToWrite","signer","getSigner","currentPrice","setCurrentPrice","priceStep","setPriceStep","tokenPurchaseEvents","setTokenPurchaseEvents","queryFilter","filters","TokenPurchase","then","events","filter","e","notice","successState","tokensPurchased","length","seasonIsOver","tokenIds","showMetamaskHint","Device","Box","flexDirection","justifyContent","marginBottom","flexGrow","showThumbnails","showPlayButton","posterUrls","posterUrl","original","renderItem","item","fontSize","number","textAlign","descriptionHtml","preventDefault","Icon","marginRight","Reducer","activatingConnector","setActivatingConnector","suppress","ethereum","on","handleConnect","console","log","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","WEB3HOOKS","tried","setTried","isAuthorized","catch","actualChainId","setActualChainId","setSaltSeasons","saltSeasons","SaltSeason","location","hash","seasonId","slice","some","s","document","querySelector","paddingLeft","paddingRight","minHeight","textTransform","marginTop","margin","getLibrary","Web3Provider","AppWrapper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.033624c8.chunk.js","sourcesContent":["const eip1152contractAddress = '0xd07dc4262bcdbf85190c01c996b4c06a461d2430'\n\nconst minterAddress = '0x1efcb24f92daa1e04ba52e3d891beecee00c629d'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC8DwM9z-H9cSTCqHR4UGEvW86jL63sre0\", // \"AIzaSyCccgoP_7ndBWqvZkPbSml3JV4RpRIyERU\",\n  // authDomain: \"saltandsatoshi.firebaseapp.com\",\n  // databaseURL: \"https://saltandsatoshi.firebaseio.com\",\n  projectId: \"saltandsatoshi\",\n  // storageBucket: \"saltandsatoshi.appspot.com\",\n  // messagingSenderId: \"629543041272\",\n  // appId: \"1:629543041272:web:80d0b9de555810bbc9e30d\"\n}\n\nconst INFURA_JSON_RPC_API = {\n  1: `https://mainnet.infura.io/v3/663207cc32894545b804fbc519d9fa2a`,\n  42: `https://kovan.infura.io/v3/663207cc32894545b804fbc519d9fa2a`,\n}\n\nconst SELLER_CONTRACT_ADDRESS = {\n  42: `0xD837F0658c74191056f222b3aCf3995e75AA3703`,\n}\n\nexport default {\n  eip1152contractAddress,\n  minterAddress,\n  firebaseConfig,\n  INFURA_JSON_RPC_API,\n  SELLER_CONTRACT_ADDRESS,\n}","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { LedgerConnector } from '@web3-react/ledger-connector'\nimport { TrezorConnector } from '@web3-react/trezor-connector'\n\nimport config from './config'\n\nconst POLLING_INTERVAL = 12000\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 42] })\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { \n    1: config.INFURA_JSON_RPC_API[1],\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n})\n\n\nexport const ledger = new LedgerConnector({\n  chainId: 1,\n  url: config.INFURA_JSON_RPC_API[1],\n  pollingInterval: POLLING_INTERVAL\n})\n\nexport const trezor = new TrezorConnector({\n  chainId: 1,\n  url: config.INFURA_JSON_RPC_API[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n})","import React from 'react'\n\ntype Props = {\n  width: string\n  height: string\n  innerWidth?: string\n  innerHeight?: string\n}\n\nclass Spinner extends React.Component<Props> {\n  render() {\n    const innerWidth = this.props.innerWidth || '200px'\n    const innerHeight = this.props.innerWidth || '200px'\n\n    return (\n      <div \n        style={{\n          height: this.props.height,\n          width: this.props.width,\n          display: 'flex'\n        }}\n        dangerouslySetInnerHTML={{\n          __html: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"margin:auto;display:block;\" width=\"${innerWidth}\" height=\"${innerHeight}\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n          <g transform=\"translate(50 50)\">\n            <g transform=\"scale(0.26)\">\n              <g transform=\"translate(-50 -50)\">\n                <g>\n                  <animateTransform attributeName=\"transform\" type=\"rotate\" repeatCount=\"indefinite\" values=\"0 50 50;360 50 50\" keyTimes=\"0;1\" dur=\"0.7575757575757576s\"></animateTransform>\n                  <path fill-opacity=\"0.8\" fill=\"#f72585\" d=\"M50 50L50 0A50 50 0 0 1 100 50Z\"></path>\n                </g>\n                <g>\n                  <animateTransform attributeName=\"transform\" type=\"rotate\" repeatCount=\"indefinite\" values=\"0 50 50;360 50 50\" keyTimes=\"0;1\" dur=\"1.0101010101010102s\"></animateTransform>\n                  <path fill-opacity=\"0.8\" fill=\"#7209b7\" d=\"M50 50L50 0A50 50 0 0 1 100 50Z\" transform=\"rotate(90 50 50)\"></path>\n                </g>\n                <g>\n                  <animateTransform attributeName=\"transform\" type=\"rotate\" repeatCount=\"indefinite\" values=\"0 50 50;360 50 50\" keyTimes=\"0;1\" dur=\"1.5151515151515151s\"></animateTransform>\n                  <path fill-opacity=\"0.8\" fill=\"#3a0ca3\" d=\"M50 50L50 0A50 50 0 0 1 100 50Z\" transform=\"rotate(180 50 50)\"></path>\n                </g>\n                <g>\n                  <animateTransform attributeName=\"transform\" type=\"rotate\" repeatCount=\"indefinite\" values=\"0 50 50;360 50 50\" keyTimes=\"0;1\" dur=\"3.0303030303030303s\"></animateTransform>\n                  <path fill-opacity=\"0.8\" fill=\"#4361ee\" d=\"M50 50L50 0A50 50 0 0 1 100 50Z\" transform=\"rotate(270 50 50)\"></path>\n                </g>\n              </g>\n            </g>\n          </g>\n          </svg>`\n        }}\n      />)\n    }\n}\n\nexport default Spinner","import React from 'react'\n\nimport { Chip } from '@material-ui/core'\n\nimport { Web3ReactProvider, useWeb3React } from '@web3-react/core'\nimport { Web3Provider } from '@ethersproject/providers'\n\nimport * as Connectors from '../connectors'\n\nconst ConnectorButton: React.FC<{theConnector: any, title: string}> = ({children, theConnector, title}) => {\n  const context = useWeb3React<Web3Provider>()\n  const { connector, activate } = context\n  const isConnected = connector === theConnector\n\n  return (\n    <a\n      href=\"#\"\n      className=\"button n01\"\n      onClick={event => {\n        event.stopPropagation()\n        activate(theConnector)\n        return false\n      }}\n    >\n      <span className=\"label\">{title}</span>\n    </a>)\n}\n\nfunction Connect() {\n  const context = useWeb3React<Web3Provider>()\n  const { chainId, account, deactivate, active, error } = context\n\n  if (!account) {\n    return (\n      <>\n        <ul id=\"buttons02\" className=\"style1 buttons\">\n          <li>\n            <ConnectorButton theConnector={Connectors.injected} title=\"Metamask\"/>\n          </li>\n          <li>\n            <ConnectorButton theConnector={Connectors.ledger} title=\"Ledger\"/>\n          </li>\n          <li>\n            <ConnectorButton theConnector={Connectors.trezor} title=\"Trezor\"/>\n          </li>\n          <li>\n            <ConnectorButton theConnector={Connectors.walletconnect} title=\"Walletconnect\"/>\n          </li>\n        </ul>\n        { error && <Chip style={{ fontWeight: 'normal', color: '#878E99' }} className=\"style2 with-cool-font\" label={error.message} color=\"primary\"/> }\n      </>)\n  } else {\n    return (<>\n      <ul id=\"buttons02\" className=\"style1 buttons\">\n        <li>\n          <a href=\"#\" className=\"button n01\"\n            onClick={event => {\n              event.stopPropagation()\n              return false\n            }}\n          >\n            <span className=\"label\">{account}</span>\n          </a>\n        </li>\n        { (chainId !== 1) && (\n          <li>\n            <a href=\"#\" className=\"button n01\"\n            onClick={event => {\n              event.stopPropagation()\n              return false\n            }}\n          >\n            <span className=\"label\">Network: {chainId}</span>\n          </a>\n          </li>\n        )}\n        <li>\n          <a href=\"#\" className=\"button n01\"\n            onClick={event => {\n              event.stopPropagation()\n              deactivate()\n              return false\n            }}\n          >\n            <span className=\"label\">Logout</span>\n          </a>\n        </li>\n      </ul>\n      { error && <p id=\"text34\" className=\"style2\">⚠️ {error.message}</p> }\n    </>)\n  }\n}\n\nexport default Connect","import Firebase from 'firebase'\nimport \"firebase/firestore\"\n\nimport config from '../config'\n\nFirebase.initializeApp(config.firebaseConfig)\nconst firestore = Firebase.firestore()\n\nexport { firestore }","import * as Firebase from '../services/firebase'\n\nexport type SaltSeason = {\n  id: string\n  number: string\n  title: string\n  posterUrls: string[]\n  chainId: 1 | 42\n  erc721ContractAddress: string\n  sellerContractAddress: string\n  tokenIds: number[]\n  descriptionHtml: string\n  // purchasedItems: number\n}\n\nconst collection = Firebase.firestore.collection('saltseasons')\n\nexport async function indexByChainId(chainId: number) {\n  const snapshot = await collection.where('chainId', '==', chainId).get()\n  const items = snapshot.docs.map(doc => {\n    var ss = doc.data() as SaltSeason\n    ss.id = doc.id\n    return ss\n  })\n  return items\n}\n\nexport async function update(ss: SaltSeason) {\n  const doc = collection.doc(ss.id)\n  await doc.set(ss)\n}","import { JsonRpcProvider, JsonRpcSigner } from '@ethersproject/providers'\n\n// EIP 1155\n\nconst TokenId = '20272'\n\nfunction getJsonRpcProvider(jsonRPCAPIURL: string, network: number): JsonRpcProvider {\n  const provider = new JsonRpcProvider(jsonRPCAPIURL, network)\n  return provider\n}\n\nexport default { TokenId, getJsonRpcProvider }","import { Contract } from '@ethersproject/contracts'\nimport { JsonRpcProvider, JsonRpcSigner } from '@ethersproject/providers'\n\nconst contractABI = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceStep\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]'\nexport function getContract(contractAddress: string, providerOrSigner: JsonRpcProvider | JsonRpcSigner) {\n  return new Contract(contractAddress, contractABI, providerOrSigner)\n}\n\nexport default { contractABI, getContract }","function isMobile() {\n  return window.innerWidth < 750\n}\n\nexport default { isMobile }","import React from 'react'\n\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\n\nfunction Number(props: {\n  number: BigNumber\n}) {\n  return <>{`Ξ${formatEther(props.number)}`}</>\n}\n\nfunction AddressLink(props: {\n  address: string\n  chainId: 1 | 42\n}) {\n  const url = `https://${ props.chainId === 42 ? `kovan.` : ``}etherscan.io/address/${props.address}`\n  return <a href={url} target=\"_blank\">{`${props.address.slice(0, 10)}...`}</a>\n}\n\nexport default { Number, AddressLink }","import React from 'react'\nimport Confetti from 'react-confetti'\n\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Link, CircularProgress, Button } from '@material-ui/core'\nimport { SaltSeason } from '../models/salt_season'\n\nexport type State = 'MINING' | 'FAILED' | 'SUCCESS'\n\ntype Props = {\n  // saltSeason: SaltSeason\n  // tokenId: number\n  state: State\n}\n\nfunction Success(props: Props) {\n  const [open, setOpen] = React.useState(true)\n\n  switch(props.state) {\n    case 'MINING':\n      return (\n        <Dialog open={true}>\n          <DialogTitle>Please wait</DialogTitle>\n          <DialogContent style={{ padding: 30 }}>\n            <CircularProgress/>\n          </DialogContent>\n        </Dialog>)\n\n    case 'FAILED':\n      return (\n        <Dialog open={open} onClose={() => setOpen(false)}>\n          <DialogTitle>Oops</DialogTitle>\n          <DialogContent style={{ padding: 30 }}>\n            <p></p>\n          </DialogContent>\n          <DialogActions style={{ padding: 30 }}>\n            <Button onClick={() => setOpen(false)}>Close</Button>\n          </DialogActions>\n        </Dialog>)\n\n    case 'SUCCESS':\n      return (\n        <>\n          <Dialog open={open} onClose={() => setOpen(false)} maxWidth=\"lg\">\n            <DialogTitle>Hooray!</DialogTitle>\n            <DialogContent style={{ padding: 30 }}>\n              <Confetti/>\n              <p>You are the owner of unique SaltSeason</p><br/>\n              <p>Now you can <a href=\"https://redeem.saltandsatoshi.com/\">redeem</a> your purchase</p>\n            </DialogContent>\n            <DialogActions style={{ padding: 30 }}>\n              <Link href=\"https://redeem.saltandsatoshi.com/\">Redeem</Link>\n            </DialogActions>\n          </Dialog>\n        </>)\n  }\n}\n\nexport default Success","import React from 'react'\n\nimport Spinner from './spinner'\n\ntype Props = {\n  width: string\n  height: string\n  imageUrl: string\n  backgroundColor?: string\n}\n\ntype State = {\n  loading: boolean\n}\n\nclass Image extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      loading: true,\n    }\n  }\n\n  // async componentDidMount() {\n  //   if (loadedImages.includes(this.props.imageUrl)) {\n  //     this.setState({ loading: false })\n  //     return\n  //   }\n\n  //   await this.preloadImage()\n  //   this.setState({ loading: false })\n  // }\n\n  // async preloadImage() {\n  //   return new Promise((resolve, reject) => {\n  //     const i = new window.Image()\n  //     i.onload = () => {\n  //       loadedImages.push(this.props.imageUrl)\n  //       resolve(0)\n  //     }\n  //     i.onerror = reject\n  //     i.src = this.props.imageUrl\n  //   })\n  // }\n\n  render() {\n    // if (this.state.loading) {\n    //   return (\n    //     <Spinner \n    //       height={this.props.height}\n    //       width={this.props.width}\n    //     />)\n    // }\n\n    return (\n      <div\n        style={{\n          display: 'block',\n          height: this.props.height,\n          width: this.props.width,\n          backgroundColor: this.props.backgroundColor\n        }}\n      >\n        <div\n          style={{\n            position: 'absolute',\n            top: 0, left: 0,\n            height: this.props.height,\n            width: this.props.width,\n          }}\n        >\n          <Spinner \n            height={this.props.height}\n            width={this.props.width}\n          />\n        </div>\n        <div\n          style={{\n            position: 'absolute',\n            top: 0, left: 0,\n            backgroundImage: `url(${this.props.imageUrl})`,\n            backgroundPosition: 'center',\n            backgroundSize: 'contain',\n            backgroundRepeat: 'no-repeat',\n            height: this.props.height,\n            width: this.props.width,\n          }}\n        />\n        \n      </div>)\n  } \n}\n\nexport default Image","import React from 'react'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { TransactionReceipt, TransactionResponse, Web3Provider } from '@ethersproject/providers'\n\nimport {  Box, Chip, Icon } from '@material-ui/core'\nimport ImageGallery, { ReactImageGalleryItem } from 'react-image-gallery'\n\nimport config from '../config'\n\nimport { Contract, Event } from '@ethersproject/contracts'\nimport ETHERIUM from '../services/etherium'\nimport SELLERV1 from '../services/etherium/contracts/sellerv1'\nimport Device from '../services/device'\nimport ETH from '../components/eth'\nimport * as SaltSeason from '../models/salt_season'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport Success, { State as SuccessState } from './_success'\nimport Image from '../components/image'\nimport Spinner from '../components/spinner'\n\ntype Props = {\n  saltSeason: SaltSeason.SaltSeason\n}\n\nconst COMING_SOON = true\n\nfunction SaltSeasonComponent(props: Props) {\n  const { saltSeason } = props\n  const provider = ETHERIUM.getJsonRpcProvider(config.INFURA_JSON_RPC_API[saltSeason.chainId], saltSeason.chainId);\n\n  const context = useWeb3React<Web3Provider>()\n  const { account, library } = context\n\n  const [contract, setContract] = React.useState<Contract | undefined>(undefined)\n  React.useEffect(() => {\n    if (contract !== undefined) { return }\n    const _contract = SELLERV1.getContract(saltSeason.sellerContractAddress, provider)\n    setContract(_contract)\n  }, [contract])\n\n  const [contractToWrite, setContractToWrite] = React.useState<Contract | undefined>(undefined)\n  React.useEffect(() => {\n    if (contractToWrite !== undefined) { return }\n    if (!account || !library) { return }\n\n    const signer = library.getSigner(account)\n    const _contract = SELLERV1.getContract(saltSeason.sellerContractAddress, signer)\n    setContractToWrite(_contract)\n  }, [contractToWrite, account])\n\n  const [currentPrice, setCurrentPrice] = React.useState<BigNumber | undefined>(undefined)\n  React.useEffect(() => {\n    if (!!currentPrice) { return } // guard: already done\n    if (!contract) { return } // guard\n\n    (async () => {\n      const currentPrice = await contract.currentPrice()\n      setCurrentPrice(currentPrice)\n    })()\n  }, [currentPrice, contract])\n\n  const [priceStep, setPriceStep] = React.useState<BigNumber | undefined>(undefined)\n  React.useEffect(() => {\n    if (!!priceStep) { return } // guard: already done\n    if (!contract) { return } // guard\n\n    (async () => {\n      const priceStep = await contract.priceStep()\n      setPriceStep(priceStep)\n    })()\n  }, [priceStep, contract])\n\n  const [tokenPurchaseEvents, setTokenPurchaseEvents] = React.useState<Event[] | undefined>(undefined)\n  React.useEffect(() => {\n    if (!contract) { return }\n    if (tokenPurchaseEvents !== undefined) { return }\n    (contract as any).queryFilter(contract.filters.TokenPurchase).then((events: Event[]) => {\n      // console.log(events)\n      setTokenPurchaseEvents(events.filter(e => (e as any).event === \"TokenPurchase\"))\n    })\n  }, [contract, tokenPurchaseEvents])\n\n  const [notice, setNotice] = React.useState<string | undefined>(undefined)\n  const [successState, setSuccessState] = React.useState<SuccessState | undefined>(undefined)\n\n  const tokensPurchased = (tokenPurchaseEvents || []).length\n  const seasonIsOver = saltSeason.tokenIds.length <= tokensPurchased\n\n  const isReady = (tokenPurchaseEvents !== undefined) && !!currentPrice\n  const currentTokenId = !seasonIsOver ? saltSeason.tokenIds[tokensPurchased] : undefined\n\n  const [showMetamaskHint, setShowMetamaskHint] = React.useState<boolean>(false)\n\n  const purchase = async () => {\n    if (!account) { throw(\"Connect to blockchain (no account)\") }\n    if (!currentPrice) { throw(\"Connect to blockchain (no contract data)\") }\n    if (!contractToWrite) { throw(\"Connect to blockchain (no contract)\") }\n    if (!currentTokenId) { throw(\"Season is over\") }\n\n    // for test\n    // const transactionResponse: TransactionResponse = await (contractToWrite as any).sendTo('0xC5Ddcb2812dd0D6a61a94310E4AA57c5122438Ca', 1)\n\n    const transactionResponse: TransactionResponse = await (contractToWrite as any).purchaseToken(saltSeason.erc721ContractAddress, currentTokenId, {\n      value: currentPrice\n    })\n\n    setSuccessState('MINING')\n\n    const transactionReceipt: TransactionReceipt = await transactionResponse.wait(1)\n    if (transactionReceipt.status === 0) { throw 'Transaction was reverted' }\n\n    // saltSeason.purchasedItems += 1\n    // await SaltSeason.update(saltSeason)\n  }\n\n  // const carouselRef = React.createRef<HTMLDivElement>()\n  // React.useEffect(() => {\n  //   if(!!carouselRef.current) {\n  //     carouselRef.current.querySelectorAll(`[role=presentation]`)[0].setAttribute(\"style\", \"position: absolute; width: 100%; height: 100%;\");\n  //   }\n  // }, [])\n\n  const isMobile = Device.isMobile();\n  \n  const isMainnet = saltSeason.chainId === 1;\n\n  return (\n    <div>\n      <Box display=\"flex\" flexDirection={isMobile ? 'column' : 'row'} justifyContent=\"center\" style={{marginBottom: '5em', width: '100%'}}>\n        <div style={isMobile ? { padding: '1em' } : { flexGrow: 1, width: '50%' }}>\n          <ImageGallery\n            showThumbnails={false}\n            showPlayButton={false}\n            items={saltSeason.posterUrls.map(posterUrl => ({ original: posterUrl }))}\n            renderItem={(item: ReactImageGalleryItem) => {\n              return (\n                <Image\n                  imageUrl={item.original}\n                  height='500px'\n                  width='100%'\n                />)\n            }}\n          />\n        </div>\n\n        <div style={isMobile ? { padding: '1em' } : { flexGrow: 1, width: '50%', padding: '0 3em' }} className=\"with-cool-font\">\n          <p style={{ fontSize: '2em', color: '#fff' }}>Season {saltSeason.number}</p><br/>\n          <h5>{saltSeason.title}</h5><br/>\n          \n          <div \n            style={{ fontWeight: 'normal', color: '#878E99', textAlign: 'justify', fontSize: 'smaller' }}\n            className=\"style2 with-cool-font\"\n            dangerouslySetInnerHTML={{ __html: saltSeason.descriptionHtml }}\n          />\n          <br/>\n\n          { !COMING_SOON && (\n            <>\n              { isReady && (\n              <>\n                <p>Edition of {saltSeason.tokenIds.length}</p>\n                <br/>\n                <p>Price {!!currentPrice && <ETH.Number number={currentPrice}/>}</p>\n                <br/>\n                <p>Price increment<sup>*</sup> {!!priceStep && <ETH.Number number={priceStep}/>}</p>\n                <br/>\n                {!!currentPrice && !!tokenPurchaseEvents && !!priceStep && (\n                    <p style={{fontSize: 'small', color: '#878E99'}}>\n                      <sup>*</sup>&nbsp;The price begins at <ETH.Number number={currentPrice.sub(priceStep.mul(tokenPurchaseEvents.length))}/> and will increase by <ETH.Number number={priceStep}/> after each purchase to an end price of <ETH.Number number={currentPrice.add(priceStep.mul(saltSeason.tokenIds.length - tokenPurchaseEvents.length))}/>\n                    </p>) }\n                <br/>\n              </>\n            )}\n            <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"between\">\n              { !isReady && <Spinner height=\"200px\" width=\"200px\"/> }\n              { isReady && (\n                <>\n                  { seasonIsOver && (\n                    <ul id=\"buttons02\" className=\"style1 buttons\">\n                      <li>\n                        <a href=\"#\" className=\"button n01\">\n                          <span className=\"label\">Season is over</span>\n                          <Icon style={{marginRight: '0.5em'}}>done</Icon>\n                        </a>\n                      </li>\n                    </ul>)\n                  } \n                  { !seasonIsOver && (\n                    <ul id=\"buttons02\" className=\"style1 buttons\">\n                      { isMainnet && (\n                        <li>\n                          <a href=\"#\" className=\"button n01\"\n                            onClick={async (event) => {\n                              event.stopPropagation()\n                              event.preventDefault()\n                              return false\n                            }}\n                          ><span className=\"label\">Coming soon</span><Icon style={{marginRight: '0.5em'}}>access_time</Icon></a>\n                        </li>\n                      )}\n                      { !isMainnet && (<li>\n                        <a href=\"#\" className=\"button n01\"\n                          onClick={async (event) => {\n                            event.stopPropagation()\n                            setNotice(undefined)\n                            try {\n                              setShowMetamaskHint(true)\n                              await purchase()\n                              setSuccessState('MINING')\n                            } catch(error) {\n                              setSuccessState(undefined)\n                              console.error(\"[ERROR]\", error)\n                              setNotice(`${error.message || error}`)\n                              return false\n                            } finally {\n                              setShowMetamaskHint(false)\n                            }\n                            setSuccessState('SUCCESS')\n                            return false\n                          }}\n                        ><span className=\"label\">Purchase</span><Icon style={{marginRight: '0.5em'}}>shopping_cart</Icon></a>\n                      </li>) }\n                      { !isMainnet && (<li>\n                        <a href=\"https://redeem.saltandsatoshi.com/\" target=\"_blank\"\n                          className=\"button n01\"\n                        ><span className=\"label\">Redeem</span><Icon style={{marginRight: '0.5em'}}>local_shipping</Icon></a>\n                      </li>) }\n                    </ul>\n                  ) }\n                </>\n              ) }\n            </Box>\n            </>\n          ) }\n          \n          <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"between\">\n            <ul id=\"buttons02\" className=\"style1 buttons\">\n              <li>\n                <a className=\"button n01\" onClick={event => { event.preventDefault(); return false; }}>\n                  <span className=\"label\">Coming soon</span>\n                  <Icon style={{marginRight: '0.5em'}}>query_builder</Icon>\n                </a>\n              </li>\n            </ul>\n          </Box>\n          \n\n          { notice && <Chip label={notice} color=\"secondary\"/> }\n        </div>\n\n        {/* <div style={{position: 'relative', height: 600, flexGrow: '65%'}} ref={carouselRef}>\n          <AutoRotatingCarousel\n            open={true}\n            autoplay={true}\n            containerStyle={{position: 'absolute', top: 0, width: '100%'}}\n            ModalProps={{disablePortal: true, hideBackdrop: true, disableScrollLock: true}}\n            ButtonProps={{variant: 'outlined'}}\n            interval={5000}\n          >\n            <Slide\n              media={\n                <div\n                  style={{\n                    backgroundImage: `url(${saltSeason.posterUrl})`,\n                    backgroundPosition: 'center',\n                    backgroundSize: 'contain',\n                    backgroundRepeat: 'no-repeat',\n                    height: '100%',\n                    width: '100%'\n                  }}\n                />\n              }\n              mediaBackgroundStyle={{ backgroundColor: 'black', height: 400 }}\n              style={{ backgroundColor: 'black' }}\n              title={`SEASON ${saltSeason.number}`}\n              mobile\n              landscape\n              // subtitle='Just using this will blow your mind.'\n            />\n            <Slide\n              media={\n                <div\n                  style={{\n                    backgroundImage: `url(${\"https://firebasestorage.googleapis.com/v0/b/saltandsatoshi.appspot.com/o/SaltSeasons%2FSalt%20Season%201%20Ethereum%20GIF%20600.gif?alt=media&token=2ed90c2b-2864-40bc-9710-b564348c33a0\"})`,\n                    backgroundPosition: 'center',\n                    backgroundSize: 'contain',\n                    backgroundRepeat: 'no-repeat',\n                    height: '100%',\n                    width: '100%'\n                  }}\n                />\n              }\n              mediaBackgroundStyle={{ backgroundColor: 'black', height: 400 }}\n              style={{ backgroundColor: 'black' }}\n              title={`SEASON ${saltSeason.number}`}\n              // subtitle='Just using this will blow your mind.'\n            />\n          </AutoRotatingCarousel> \n        </div> */}\n      </Box>\n      { successState && <Success state={successState}/> }\n      { showMetamaskHint && <div className=\"metmask-hint\"><span>Please confirm a pending Ethereum transaction.</span></div> }\n    </div>)\n}\n\nexport default SaltSeasonComponent","import React from 'react'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { Web3Provider } from '@ethersproject/providers'\n\nimport * as WEB3HOOKS from '../services/web3_hooks'\nimport Spinner from '../components/spinner'\nimport Connect from '../components/connect'\n\nimport * as SaltSeason from '../models/salt_season'\nimport SaltSeasonComponent from './_salt_season'\n\nimport { Box, Icon } from '@material-ui/core'\n\nconst DEFAULT_CHAIN_ID = 42\n\nfunction Reducer() {\n  const context = useWeb3React<Web3Provider>()\n  const { connector, chainId } = context\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = React.useState<any>()\n  React.useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined)\n    }\n  }, [activatingConnector, connector])\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = WEB3HOOKS.useEagerConnect()\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  WEB3HOOKS.useInactiveListener(!triedEager || !!activatingConnector)\n\n  // Trick to reset on chain change\n  const [actualChainId, setActualChainId] = React.useState<number | undefined>(chainId)\n  React.useEffect(() => {\n    if (!!actualChainId && actualChainId !== chainId) {\n      setSaltSeasons(undefined)\n    }\n    setActualChainId(chainId)\n  }, [actualChainId, chainId])\n\n  const [saltSeasons, setSaltSeasons] = React.useState<SaltSeason.SaltSeason[] | undefined>(undefined)\n  React.useEffect(() => { // Load auctions from Firebase\n    if (!!saltSeasons) { return } // guard: already done\n    // if (!chainId) { return }\n\n    (async () => {\n      let items = await SaltSeason.indexByChainId(chainId || DEFAULT_CHAIN_ID)\n\n      if (!!window.location.hash) {\n        const seasonId = window.location.hash.slice(1)\n        if (items.some(s => s.id === seasonId)) {\n          items = items.filter(s => s.id === seasonId)\n        }\n      }\n\n      setSaltSeasons(items)\n    })()\n  }, [saltSeasons, chainId])\n\n  if (!saltSeasons) { return <Spinner height=\"200px\" width=\"200px\"/> }\n\n  // Dirty\n  (document.querySelector(\"#main > .inner\") as any).style.paddingLeft = 0;\n  (document.querySelector(\"#main > .inner\") as any).style.paddingRight = 0;\n\n  return (\n    <div>\n      <section id=\"redemption-section\">\n        <div id=\"container19\" className=\"container default full screen\" style={{minHeight: 'auto'}}>\n          <div className=\"wrapper\">\n            <div className=\"inner\" style={{padding: '3em 0em 1em 0em'}}>\n              <h2 id=\"text33\" style={{ fontWeight: 'normal', textTransform: 'none', color: '#fff' }} className=\"with-cool-font\">Salt Seasons</h2>\n              \n              <div style={{ fontWeight: 'normal', color: '#878E99' }} className=\"style2 with-cool-font\">\n                <p>Welcome to Salt Seasons - join us on the quest to close the divide between physical and digital collections.</p>\n                <br/>\n                <p>The first Salt Season, \"Can't Be Stopped\" consists of two editions of 20 unique collectible hoodies, each linked 1:1 to an NFT which is verifiable via an NFC tag.</p>\n              </div>\n              \n              <Connect/>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Box display=\"flex\" flexDirection=\"column\" style={{marginTop: '3em', color: 'lightgray'}}>\n        {\n          saltSeasons.map(saltSeason => (\n            <SaltSeasonComponent saltSeason={saltSeason}/>\n          ))\n        }\n        {\n          saltSeasons.length == 0 && (\n            <span style={{margin: 'auto', fontSize: 'xxx-large'}}>Coming soon</span>\n          )\n        }\n      </Box>\n    </div>)\n}\n\nexport default Reducer","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from '../connectors'\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, [ activate ]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\")\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId)\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId)\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}","import React from 'react'\n\nimport { Web3ReactProvider } from '@web3-react/core'\nimport { Web3Provider } from '@ethersproject/providers'\n\nimport RedeemPage from './redeem_page/page'\nimport ShowcasePage from './showcase_page/page'\nimport AuctionsPage from './auctions_page/page'\nimport SaltSeasonsPage from './saltseasons/index'\nimport SaltSeasonCardsPage from './saltseason_cards/index'\n\nfunction getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider)\n  return library\n}\n\nfunction AppWrapper() {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      {/* <RedeemPage/> */}\n      {/* <ShowcasePage/> */}\n      {/* <AuctionsPage/> */}\n      <SaltSeasonsPage/>\n      {/* <SaltSeasonCardsPage/> */}\n    </Web3ReactProvider>\n  )\n}\n\nexport default AppWrapper\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}